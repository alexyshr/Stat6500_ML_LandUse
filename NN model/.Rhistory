# 1- load the data files
trainData <- read.csv("training.csv")
testData <- read.csv("testing")
testData <- read.csv("testing.csv")
#check for missing data
sum(is.na(trainData))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(trainData[,!1], is.finite))
#check for missing data
sum(is.na(testData))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(testData[,!1], is.finite))
sum(is.na(trainData)); sum(is.na(testData))
## 2- check for missing or NaN values
#check for missing data
sum(is.na(trainData)); sum(is.na(testData))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(trainData[,!1], is.finite)); sum(!sapply(testData[,!1], is.finite))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(testData[,!1], is.finite)); sum(!sapply(testData[,!1], is.finite))
View(testData)
## 3- Change to categorical data
# convert class from "char" into a factor
trainData$class <- as.factor(trainData$class)
testData$class <- as.factor(testData$class)
trainingList <- list(); testingList <- list();
#create new dataframe for each coarseness level
for( i in 1:7){
#set the name to data + coarseness value
name<- paste("data", i*20, sep = "")
#first column index of the selected coarseness
begin = (i-1)*21+2
#last column index
ending = begin+20
#assign the first column and the columns between first and last
assign(name, trainData[,c(1,begin:ending)])
assign(name, testData[,c(1,begin:ending)])
# add to the list
trainingList[[i]] <- trainData[,c(1,begin:ending)]
testingList[[i]] <- testData[,c(1,begin:ending)]
}
trainingList <- list(); testingList <- list();
#create new dataframe for each coarseness level
for( i in 1:7){
#set the name to data + coarseness value
name<- paste("trainingData", i*20, sep = "")
name<- cbind(paste("testingData", i*20, sep = ""))
#first column index of the selected coarseness
begin = (i-1)*21+2
#last column index
ending = begin+20
#assign the first column and the columns between first and last
assign(name[1], trainData[,c(1,begin:ending)])
assign(name[2], testData[,c(1,begin:ending)])
# add to the list
trainingList[[i]] <- trainData[,c(1,begin:ending)]
testingList[[i]] <- testData[,c(1,begin:ending)]
}
## 1- load the data files
trainData <- read.csv("training.csv")
testData <- read.csv("testing.csv")
## 2- check for missing or NaN values
#check for missing data in both data sets
sum(is.na(trainData)); sum(is.na(testData))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(trainData[,!1], is.finite)); sum(!sapply(testData[,!1], is.finite))
## 3- Change to categorical data
# convert class from "char" into a factor
trainData$class <- as.factor(trainData$class)
testData$class <- as.factor(testData$class)
## 4- separate the data into 7 coarseness levels
#create a list of dataframes
trainingList <- list(); testingList <- list();
for( i in 1:7){
#set the name to data + coarseness value
name<- paste("trainingData", i*20, sep = "")
name<- cbind(paste("testingData", i*20, sep = ""))
#first column index of the selected coarseness
begin = (i-1)*21+2
#last column index
ending = begin+20
#assign the first column and the columns between first and last
assign(name[1], trainData[,c(1,begin:ending)])
assign(name[2], testData[,c(1,begin:ending)])
# add to the list
trainingList[[i]] <- trainData[,c(1,begin:ending)]
testingList[[i]] <- testData[,c(1,begin:ending)]
}
View(name)
nnm <- paste("dd", 2)
nnm <- cbing(paste("dd", 3))
nnm <- cbind(paste("dd", 3))
View(nnm)
View(nnm)
nnm <- paste("dd", 2)
nnm <- rbind(paste("dd", 3))
nnm <- list()
nnm[1] <- paste("dd", 2)
nnm[2] <- paste("dd", 3)
nnm[2]
trainData <- read.csv("training.csv")
testData <- read.csv("testing.csv")
## 2- check for missing or NaN values
#check for missing data in both data sets
sum(is.na(trainData)); sum(is.na(testData))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(trainData[,!1], is.finite)); sum(!sapply(testData[,!1], is.finite))
#no missing or NaN data
## 3- Change to categorical data
# convert class from "char" into a factor
trainData$class <- as.factor(trainData$class)
testData$class <- as.factor(testData$class)
## 4- separate the data into 7 coarseness levels
#create a list of dataframes
trainingList <- list(); testingList <- list(); name <- list()
#create new dataframe for each coarseness level
for( i in 1:7){
#set the name to data + coarseness value
name[1] <- paste("trainingData", i*20, sep = "")
name[2] <- paste("testingData", i*20, sep = "")
#first column index of the selected coarseness
begin = (i-1)*21+2
#last column index
ending = begin+20
#assign the first column and the columns between first and last
assign(name[1], trainData[,c(1,begin:ending)])
assign(name[2], testData[,c(1,begin:ending)])
# add to the list
trainingList[[i]] <- trainData[,c(1,begin:ending)]
testingList[[i]] <- testData[,c(1,begin:ending)]
}
View(name)
name[1]
name[[1]]
trainData <- read.csv("training.csv")
testData <- read.csv("testing.csv")
## 2- check for missing or NaN values
#check for missing data in both data sets
sum(is.na(trainData)); sum(is.na(testData))
# check for NaN/infinte data, since all attributes are numerical, we check with is.infinite()
sum(!sapply(trainData[,!1], is.finite)); sum(!sapply(testData[,!1], is.finite))
#no missing or NaN data
## 3- Change to categorical data
# convert class from "char" into a factor
trainData$class <- as.factor(trainData$class)
testData$class <- as.factor(testData$class)
## 4- separate the data into 7 coarseness levels
#create a list of dataframes
trainingList <- list(); testingList <- list(); name <- list()
#create new dataframe for each coarseness level
for( i in 1:7){
#set the name to data + coarseness value
name[1] <- paste("trainingData", i*20, sep = "")
name[2] <- paste("testingData", i*20, sep = "")
#first column index of the selected coarseness
begin = (i-1)*21+2
#last column index
ending = begin+20
#assign the first column and the columns between first and last
assign(name[[1]], trainData[,c(1,begin:ending)])
assign(name[[2]], testData[,c(1,begin:ending)])
# add to the list
trainingList[[i]] <- trainData[,c(1,begin:ending)]
testingList[[i]] <- testData[,c(1,begin:ending)]
}
rm(name)
## 5- clean the work space
rm(name); rm(begin); rm(ending); rm(i); rm(trainData); rm(testData)
knitr::opts_chunk$set(echo = TRUE)
source('preprocessor', local = TRUE)
source('preprocessor.r', local = TRUE)
View(testingList)
View(testingList)
library(nnet)
